{"version":3,"sources":["SortingVisualizer/SortingAlgorithms.js","UI/Toolbar.jsx","App.js","hooks/getWindowDimension.js","serviceWorker.js","index.js"],"names":["mergeSort","array","length","auxArray","slice","animations","mergeSortHelper","mainArray","start","end","middle","Math","floor","i","k","j","push","doMerge","Component","App","hasWindow","window","getWindowDimensions","width","innerWidth","height","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","setArray","resetArray","max","min","arr","random","className","map","value","idx","key","style","Button","onClick","console","log","len","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","color","barOne","barTwo","setTimeout","backgroundColor","newHeight","merge","temp","bubbleSort","firstIndex","secondIndex","firstHeight","secondHeight","bubble","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db067411.chunk.js","sourcesContent":["export function mergeSort(array){\r\n    if (array.length === 1) return;\r\n    const auxArray = array.slice();\r\n    const animations = [];\r\n    mergeSortHelper(array, auxArray, animations, 0, array.length-1);\r\n    return animations;\r\n\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, auxArray, animations, start, end){\r\n    if (start === end ) return;\r\n    const middle = Math.floor((start+end)/2);\r\n    mergeSortHelper(auxArray, mainArray, animations, start, middle);\r\n    mergeSortHelper(auxArray, mainArray, animations, middle+1, end);\r\n    doMerge(mainArray, auxArray, animations, start, middle, end);\r\n\r\n\r\n}  \r\nfunction doMerge(mainArray, auxArray, animations, start, middle, end){\r\n    let i=start; \r\n    let k=start;\r\n    let j=middle+1;\r\n    while (i <= middle && j <= end){\r\n        \r\n        animations.push([i,j]);\r\n        animations.push([i,j]);\r\n    \r\n        if (auxArray[i] <= auxArray[j]){\r\n            animations.push([k, auxArray[i]]);\r\n            mainArray[k++] = auxArray[i++]\r\n        }\r\n        else{\r\n            animations.push([k, auxArray[j]]);\r\n            mainArray[k++] = auxArray[j++];\r\n        } \r\n    }\r\n    while (i<=middle){\r\n        animations.push([i,i]);\r\n        animations.push([i,i]);\r\n        animations.push([k, auxArray[i]]);\r\n        mainArray[k++] = auxArray[i++];\r\n    }\r\n    while (j<=end){\r\n        animations.push([j,j]);\r\n        animations.push([j,j]);\r\n        animations.push([k, auxArray[j]]);\r\n        mainArray[k++] = auxArray[j++];\r\n    }\r\n}\r\n\r\n\r\nexport const quickSort = (array) =>{\r\n\r\n}\r\n\r\nexport function bubbleSort(array, auxArray){\r\n    const animations = [];\r\n    let i=array.length;\r\n    let j=0;\r\n    let temp=0;\r\n    while (i>0){\r\n        \r\n        for (j=0; j<i-1; j++){\r\n            //animations.push([j,j+1]);\r\n\r\n            if (array[j]>array[j+1]){\r\n\r\n                animations.push([j, j+1, array[j], array[j+1], i-1]);//swap animation\r\n\r\n                temp=array[j]; \r\n                array[j]=array[j+1];\r\n                array[j+1]= temp;\r\n                }\r\n        }\r\n        i--;\r\n    }\r\n    return animations;\r\n}","import React, { Component } from \"react\";\r\nimport \"./Toolbar.css\";\r\n\r\nclass Toolbar extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleClick = this.handleClick.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    componentDidMount() {\r\n      const { generateArray } = this.props;\r\n      generateArray(21);\r\n      document.getElementById(\"changeSize\").value = 11;\r\n    }\r\n    handleClick(algorithm) {\r\n      const { updateAlgorithm } = this.props;\r\n      updateAlgorithm(algorithm);\r\n    }\r\n    handleChange(evt) {\r\n      const { generateArray } = this.props;\r\n  \r\n      generateArray(Math.floor((parseInt(evt.target.value) + 2) * 1.65));\r\n      generateArray(Math.floor((parseInt(evt.target.value) + 3) * 1.65));\r\n    }\r\n  \r\n    render() {\r\n      const {\r\n        array,\r\n        algorithm,\r\n        generateArray,\r\n        sort,\r\n        isRunning,\r\n      } = this.props;\r\n      //const speed = 570 - Math.pow(array.length, 2) > 0 ?\r\n        //570 - Math.pow(array.length, 2) : 0;\r\n      const color = isRunning ? \"rgba(214, 29, 29, 0.8)\" : \"white\";\r\n      const cursor = isRunning ? \"auto\" : \"pointer\";\r\n      return (\r\n        <div id=\"toolbar\">\r\n          <div\r\n            id=\"generateArray\"\r\n            id={!isRunning ? \"generateArray\" : \"generateArrayX\"}\r\n            style={{color: color, cursor: cursor}}\r\n            onClick={!isRunning ? () => generateArray(array.length) : null}>\r\n            Generate New Array\r\n          </div>\r\n          <div className=\"separator\"></div>\r\n          <div\r\n            id=\"arraySize\"\r\n            style={{color: color}}>\r\n            Change Array Size & Sorting Speed\r\n          </div>\r\n          <input\r\n            id=\"changeSize\"\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            style={{background: color, cursor: cursor}}\r\n            disabled={isRunning ? \"disabled\" : null}\r\n            onChange={this.handleChange}\r\n            />\r\n          <div className=\"separator\"></div>\r\n          <div\r\n            className={algorithm === \"mergeSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n            onClick={() => this.handleClick(\"mergeSort\")}>\r\n            Merge Sort\r\n          </div>\r\n          <div\r\n            className={algorithm === \"quickSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n            onClick={() => this.handleClick(\"quickSort\")}>\r\n            Quick Sort\r\n          </div>\r\n          <div\r\n            className={algorithm === \"heapSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n            onClick={() => this.handleClick(\"heapSort\")}>\r\n            Heap Sort\r\n          </div>\r\n          <div\r\n            className={algorithm === \"bubbleSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n            onClick={() => this.handleClick(\"bubbleSort\")}>\r\n            Bubble Sort\r\n          </div>\r\n          <div className=\"separator\"></div>\r\n          \r\n          \r\n          \r\n          \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  /*\r\n  { algorithm ? <div\r\n              id=\"sort\"\r\n              style={{color: color, cursor: cursor}}\r\n              onClick={!isRunning ? () => sort(algorithm, array, speed) : null}>\r\n              Sort!\r\n            </div> : null\r\n          }\r\n  */\r\n  export default Toolbar;","import React, { Component, useEffect, useState } from 'react';\n//import SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './SortingVisualizer/SortingVisualizer.css'\nimport {mergeSort, bubbleSort}  from './SortingVisualizer/SortingAlgorithms.js'\nimport useWindowDimensions from './hooks/getWindowDimension'\nimport Navbar from './UI/navbar';\nimport './App.css';\nimport {Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './UI/Toolbar';\nimport Toolbar from './UI/Toolbar';\n\n\nfunction App() {\n\n  const {width, height} = useWindowDimensions();\n  const [array, setArray] = useState([]); \n\n  function resetArray(){\n    \n    const arr = [];\n    for (let i = 0; i < (300); i++){\n        arr.push(randomInt(5, 600));\n    }\n    \n    setArray(arr);\n  }\n\n  function resetColors(array){\n    const len = array.length;\n\n    for (let i=0; i<len;i++){\n      array[i].style.backgroundColor = 'white';\n    }\n  }\n  \n  useEffect(()=>{\n    resetArray();\n  },[]);\n\n\n  function merge(){\n    const animations = mergeSort(array);\n    console.log(\"merged\");\n    console.log(array);\n    console.log(animations);\n    console.log(width);\n    console.log(height);\n    let i =0;\n    const len = animations.length;\n    \n    console.log(array);\n    for (i; i<len; i++){\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const colorChange = i % 3 !== 2;\n\n        if (colorChange){ \n            const [barOneIdx, barTwoIdx] = animations[i];\n            const color = i%3 === 0? 'red':'green';\n            const barOne = arrayBars[barOneIdx].style;\n            const barTwo = arrayBars[barTwoIdx].style;\n\n            setTimeout( ()=>{\n                barOne.backgroundColor = color;\n                barTwo.backgroundColor = color;\n            }, i*2);\n        }else{\n            const [barOneIdx, newHeight] = animations[i];\n            setTimeout(()=>{\n                const barOne = arrayBars[barOneIdx].style;\n                barOne.height = `${newHeight}px`;\n            }, i*2);\n        }\n    }\n}\n\nfunction bubble(){\n  const auxArray = array.slice();\n  const animations = bubbleSort(array, auxArray);\n  console.log(animations[23]);\n  const len = animations.length;\n\n  for (let i=0; i<len; i++){\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    \n\n    if (animations[i]){\n      const [firstIndex, secondIndex, firstHeight, secondHeight, j] = animations[i];\n\n      const barOne = arrayBars[firstIndex].style;\n      const barTwo = arrayBars[secondIndex].style;\n\n      setTimeout(()=>{\n\n        barOne.backgroundColor = 'red';\n        barTwo.backgroundColor = 'red';\n\n        barOne.height = `${secondHeight}px`;\n        barTwo.height = `${firstHeight}px`;\n\n        barOne.backgroundColor = 'white';\n        barTwo.backgroundColor = 'white';\n\n        if (secondIndex == j){\n          barTwo.backgroundColor = 'green';\n        } \n      },i*2)\n\n  \n\n    }\n  }\n  \n\n}\n  return (\n    <div className=\"array-container\">\n\n        \n        {array.map((value, idx)=>(\n\n            <div\n                className=\"array-bar\"\n                key={idx}\n                style={{height: `${value}px`}}>\n            </div>\n\n        ))}\n        \n  \n      \n        <div> \n          <Button onClick={()=>resetArray()} className=\"btn btn-danger btn-sm m-2\">reset Array</Button>\n          <Button onClick={()=>merge()} className=\"btn btn-danger btn-sm m-2\">merge</Button>\n          <Button onClick={()=>bubble()} className=\"btn btn-danger btn-sm m-2\">bubble sort</Button>\n        </div>\n                \n             \n\n            </div>\n  );\n\n}\n\nfunction randomInt(max, min){\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default App;","import { useState, useEffect } from 'react';\r\n\r\nexport default function useWindowDimensions() {\r\n\r\n  const hasWindow = typeof window !== 'undefined';\r\n\r\n  function getWindowDimensions() {\r\n    const width = hasWindow ? window.innerWidth : null;\r\n    const height = hasWindow ? window.innerHeight : null;\r\n    return {\r\n      width,\r\n      height,\r\n    };\r\n  }\r\n\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    if (hasWindow) {\r\n      function handleResize() {\r\n        setWindowDimensions(getWindowDimensions());\r\n      }\r\n\r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [hasWindow]);\r\n\r\n  return windowDimensions;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}